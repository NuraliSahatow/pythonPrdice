import requests
from telegram.ext import JobQueue
import logging
import sqlite3
from telegram import InlineKeyboardMarkup, InlineKeyboardButton, Update
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, MessageHandler, Filters, CallbackContext
TOKEN = '6329575854:AAEWTNYX_Lz-yKFRb3Q22o-tmUauXCA0f_M'

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)
room_timers = {}
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def connect_db():
    return sqlite3.connect('bot_database.db')

# –°–æ–∑–¥–∞–π—Ç–µ —Ç–∞–±–ª–∏—Ü—É, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
with connect_db() as conn:
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY,
            username TEXT,
            first_name TEXT,
            last_name TEXT,
            balance REAL,
            chat_id INTEGER
        )
    ''')
    conn.commit()

    cursor.execute('''
    CREATE TABLE IF NOT EXISTS rooms (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        player1_chat_id INT,
        player2_chat_id INT,
        Bet INT,
        player1_dice INT DEFAULT 0,
        player2_dice INT DEFAULT 0,
        player1_balance DECIMAL(10, 2) DEFAULT 0,
        player2_balance DECIMAL(10, 2) DEFAULT 0,
        total_winnings DECIMAL(10, 2) DEFAULT 0,
        status VARCHAR(10) DEFAULT 'open'
    )
    ''')
    conn.commit()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def user_exists(conn, user_id):
    cursor = conn.cursor()
    cursor.execute("SELECT 1 FROM users WHERE chat_id = ?", (user_id,))
    return cursor.fetchone() is not None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ —Ç–∞–±–ª–∏—Ü—ã 'rooms'
def delete_all_rooms():
    with connect_db() as conn:
        cursor = conn.cursor()
        cursor.execute("DELETE FROM rooms")
        conn.commit()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start
def start(update: Update, context: CallbackContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ update.message
    if update.message:
        user = update.message.from_user
        username = user.username
        first_name = user.first_name
        last_name = user.last_name
        user_id = update.message.chat_id
        message_to_edit = update.message.reply_text(f"–ü—Ä–∏–≤–µ—Ç, {first_name}! –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π:")
    else:
        # –ï—Å–ª–∏ update.message –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –∑–Ω–∞—á–∏—Ç, —ç—Ç–æ –±—ã–ª–æ –≤—ã–∑–≤–∞–Ω–æ –∏–∑ –∫–Ω–æ–ø–∫–∏ "–ú–µ–Ω—é"
        # –í —ç—Ç–æ–º —Å–ª—É—á–∞–µ, –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ callback_query
        user = update.callback_query.from_user
        username = user.username
        first_name = user.first_name
        last_name = user.last_name
        user_id = update.callback_query.message.chat_id
        message_to_edit = update.callback_query.message

    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL-–∑–∞–ø—Ä–æ—Å–∞
        with connect_db() as conn:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–ø–∏—Å—å —Å –¥–∞–Ω–Ω—ã–º chat_id
            if not user_exists(conn, user_id):
                # –ï—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç, –≤—ã–ø–æ–ª–Ω—è–µ–º –≤—Å—Ç–∞–≤–∫—É
                cursor = conn.cursor()
                cursor.execute("INSERT INTO users (username, first_name, last_name, balance, chat_id) VALUES (?, ?, ?, ?, ?)",
                               (username, first_name, last_name, 0.0, user_id))
                conn.commit()

        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏
        keyboard = [
            [
                InlineKeyboardButton("üé≤–ò–≥—Ä–∞—Ç—å", callback_data="play"),
                InlineKeyboardButton("üí∞–§–∏–Ω–∞–Ω—Å—ã", callback_data="finances")
            ],
            [
                InlineKeyboardButton("üêû–ù–∞—à–µ–ª –ë–∞–≥?", callback_data="bug"),
                InlineKeyboardButton("üìû–ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")
            ],
            [
                InlineKeyboardButton("‚öôÔ∏è–ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings"),
                InlineKeyboardButton("‚öôÔ∏è–ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="dell")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        context.bot.edit_message_text(
            chat_id=user_id,
            message_id=message_to_edit.message_id,
            text=f"–ü—Ä–∏–≤–µ—Ç, {first_name}! –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π:",
            reply_markup=reply_markup
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã /start: {str(e)}")
        if update.message:
            update.message.reply_text(f"{username} –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        else:
            update.callback_query.message.reply_text(f"{username} –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
def delete_room(context: CallbackContext):
    room_id = context.job.context
    with connect_db() as conn:
        cursor = conn.cursor()
        cursor.execute("DELETE FROM rooms WHERE id = ?", (room_id,))
        conn.commit()
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
def button(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()
    data = query.data.split(':')
    action = data[0]
    value = int(data[1]) if len(data) > 1 else None
    if query.data == "play":
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ò–≥—Ä–∞—Ç—å"
        keyboard = [
            [
                InlineKeyboardButton("‚öî–°–æ–∑–¥–∞—Ç—å –ö–æ–º–Ω–∞—Ç—É", callback_data="create_r"),
                InlineKeyboardButton("–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—Å—è –≤ –∫–æ–º–Ω–∞—Ç—É", callback_data="join_r")

            ],
            [
                InlineKeyboardButton("üìä–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats"),
                InlineKeyboardButton("üè†–ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é", callback_data="menu")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        query.edit_message_text(text="–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:", reply_markup=reply_markup)

    elif query.data == "finances":
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–§–∏–Ω–∞–Ω—Å—ã"
        #query.edit_message_text(text="–í—ã –≤—ã–±—Ä–∞–ª–∏ –§–∏–Ω–∞–Ω—Å—ã üí∞")
        balance_info(update, context)
    elif query.data == "bug":
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ù–∞—à–µ–ª –ë–∞–≥?"
        query.edit_message_text(text="–í—ã –≤—ã–±—Ä–∞–ª–∏ –ù–∞—à–µ–ª –ë–∞–≥? üêû")

    elif query.data == "support":
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥–¥–µ—Ä–∂–∫–∞"
        query.edit_message_text(text="–í—ã –≤—ã–±—Ä–∞–ª–∏ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ üìû")

    elif query.data == "settings":
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"
        query.edit_message_text(text="–í—ã –≤—ã–±—Ä–∞–ª–∏ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è")

    elif query.data == "menu":
        start(update, context)
    elif query.data == "duel":
        duel(update, context)
    elif query.data == "dell":
        delete_all_rooms()
    elif query.data == "create_r":
        create_room(update, context)
    elif query.data == "join_r":
        join_room(update, context)
        join_room(update, context, value)
    elif query.data == "play100":
        bet_value = 100
        set_bet(update, context, bet_value)
    elif query.data == "play1000":
        bet_value = 1000
        set_bet(update, context, bet_value)
    elif query.data == "play5000":
        bet_value = 5000
        set_bet(update, context, bet_value)
    elif query.data == "play10000":
        bet_value = 10000
        set_bet(update, context, bet_value)
    elif query.data == "p100":
        bet_value = 100
        join_room1(update,context,bet_value)
    elif query.data == "p1000":
        bet_value = 1000
        join_room1(update,context,bet_value)
    elif query.data == "p5000":
        bet_value = 5000
        join_room1(update,context,bet_value)
    elif query.data == "p10000":
        bet_value = 10000
        join_room1(update,context,bet_value)
def balance_info(update: Update, context: CallbackContext):
    user_id = update.callback_query.message.chat_id
    query = update.callback_query

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    balance, error = get_balance(user_id)
    balance2, error = get_balance_from_database(user_id)

    if error:
        query.edit_message_text(text=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞: {error}")
        return

    # –í—ã–≤–æ–¥ –±–∞–ª–∞–Ω—Å–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –æ–±–º–µ–Ω–∞
    text = f"–í–∞—à –±–∞–ª–∞–Ω—Å: {balance} PR\n–í–∞—à –±–∞–ª–∞–Ω—Å –≤ –±–æ—Ç–µ:  {balance2}"

    keyboard = [
        [InlineKeyboardButton("–û–±–º–µ–Ω—è—Ç—å –ë–∞–ª–∞–Ω—Å", callback_data="exchange_balance")],
        [InlineKeyboardButton("–° –∏–≥—Ä–æ–≤–æ–≥–æ –±–æ—Ç–∞ –Ω–∞ –¥—Ä—É–≥–æ–π –±–æ—Ç", callback_data="transfer_to_another_bot")],
        [InlineKeyboardButton("–° –¥—Ä—É–≥–æ–≥–æ –±–æ—Ç–∞ –Ω–∞ –∏–≥—Ä–æ–≤–æ–π –±–æ—Ç", callback_data="transfer_from_another_bot")],
        [InlineKeyboardButton("üè†–ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é", callback_data="menu")]
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)

    query.edit_message_text(text=text, reply_markup=reply_markup)
def get_balance_from_database(user_id):
    # –ó–¥–µ—Å—å –≤—ã –¥–æ–ª–∂–Ω—ã –Ω–∞–ø–∏—Å–∞—Ç—å –∫–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –∏–∑ –≤–∞—à–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    # –ü—Ä–∏–º–µ—Ä:
    with connect_db() as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT balance FROM users WHERE chat_id = ?", (user_id,))
        result = cursor.fetchone()

        if result:
            return result[0], None
        else:
            return None, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"
def get_balance(user_id):
    api_url = "https://pr.social/api/transfer_balance/"
    api_key = "Owuftwg4PJV31SP6"

    # –ó–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
    params = {
        "key": api_key,
        "type": "balance",
        "us_id": user_id,
        "currency": "pr"
    }

    response = requests.get(api_url)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
    if response.status_code == 200:
        data = response.json()
        if data.get("error"):
            return None, f"Error: {data['error']}"
        elif data.get("success"):
            return data['success'], None
    else:
        return None, f"Failed to retrieve balance. Status code: {response.status_code}"

def create_room(update: Update, context: CallbackContext):
    user_id = update.callback_query.message.chat_id
    query = update.callback_query
    keyboard2 = [
            [
                InlineKeyboardButton("üí∞100 PR", callback_data="play100"),
                InlineKeyboardButton("üí∞1000 PR", callback_data="play1000")
            ],
            [
                InlineKeyboardButton("üí∞5000 PR", callback_data="play5000"),
                InlineKeyboardButton("üí∞10000 PR", callback_data="play10000")
            ],
            [
                InlineKeyboardButton("üè†–ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é", callback_data="menu")
            ]
        ]
    reply_markup2 = InlineKeyboardMarkup(keyboard2)
    query.edit_message_text(text="–ü–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –∫–æ–º–Ω–∞—Ç—ã –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞–≤–∫—É",reply_markup=reply_markup2)
def set_bet(update: Update, context: CallbackContext, bet_value):
    user_id = update.callback_query.message.chat_id
    try:
        with connect_db() as conn:
            cursor = conn.cursor()
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–∑–¥–∞–Ω–∞ –ª–∏ —É–∂–µ –∫–æ–º–Ω–∞—Ç–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cursor.execute("SELECT id FROM rooms WHERE player1_chat_id = ? AND status = 'betted'", (user_id,))
            existing_room = cursor.fetchone()

            if existing_room:
                context.bot.send_message(user_id, "–í—ã —É–∂–µ —Å–æ–∑–¥–∞–ª–∏ –∫–æ–º–Ω–∞—Ç—É. –û–∂–∏–¥–∞–π—Ç–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞.")
                return

            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            cursor.execute("INSERT INTO rooms (player1_chat_id, player2_chat_id, Bet, status) VALUES (?, NULL, ?, 'betted')", (user_id, bet_value))
            conn.commit()

            # –ü–æ–ª—É—á–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∫–æ–º–Ω–∞—Ç—ã
            cursor.execute("SELECT last_insert_rowid()")
            room_id = cursor.fetchone()[0]

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –Ω–∞ 60 —Å–µ–∫—É–Ω–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã
            job = context.job_queue.run_once(delete_room, 60, context=room_id)
            room_timers[room_id] = job

            context.bot.send_message(user_id, f"–í—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–ª–∏ –∫–æ–º–Ω–∞—Ç—É c —Å—Ç–∞–≤–∫–æ–π {bet_value}, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, —á—Ç–æ–±—ã –∫ –∫–æ–º–Ω–∞—Ç–µ –∫—Ç–æ-—Ç–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è. –ï—Å–ª–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ –º–∏–Ω—É—Ç—ã –Ω–∏–∫—Ç–æ –Ω–µ –ø–æ–¥–∫–ª—é—á–∏—Ç—Å—è, —Ç–æ –∫–æ–º–Ω–∞—Ç–∞ —É–¥–∞–ª–∏—Ç—Å—è.")
    except Exception as e:
        logger.error(f"Error in set_bet: {str(e)}")
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–î—É—ç–ª—å"
def duel(update: Update, context: CallbackContext):
    user_id = update.callback_query.message.chat_id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–≤–æ–±–æ–¥–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã —Å –æ–∂–∏–¥–∞—é—â–∏–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏
    with connect_db() as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT id, player1_chat_id FROM rooms WHERE status = 'open' AND player1_chat_id != ?", (user_id,))
        room = cursor.fetchone()

        if room:
            # –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–æ–º–Ω–∞—Ç–µ
            room_id, player1_chat_id = room
            cursor.execute("UPDATE rooms SET player2_chat_id = ? WHERE id = ?", (user_id, room_id))
            cursor.execute("UPDATE rooms SET status = 'started' WHERE id = ?", (room_id,))
            conn.commit()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã –æ–±–æ–∏–º –∏–≥—Ä–æ–∫–∞–º
            dice_handler(update, context)

        else:
            # –ü–æ–∏—Å–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –ø–µ—Ä–≤—ã–º –∏–≥—Ä–æ–∫–æ–º
            cursor.execute("SELECT id FROM rooms WHERE status = 'open' AND player1_chat_id = ?", (user_id,))
            room = cursor.fetchone()

            if room:
                # –í —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –ø–µ—Ä–≤—ã–º –∏–≥—Ä–æ–∫–æ–º, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
                pass
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–æ–º–Ω–∞—Ç—É –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
                cursor.execute("INSERT INTO rooms (player1_chat_id, player2_chat_id, status) VALUES (?, NULL, 'open')", (user_id,))
                conn.commit()
                update.callback_query.message.reply_text("–û–∂–∏–¥–∞–Ω–∏–µ –¥—Ä—É–≥–æ–≥–æ –∏–≥—Ä–æ–∫–∞...")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã –∫–æ–º–Ω–∞—Ç—ã
ROOM_STATUS_BETTED = "betted"
ROOM_STATUS_OPEN = "open"     # –ö–æ–º–Ω–∞—Ç–∞ –æ—Ç–∫—Ä—ã—Ç–∞ –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥—Ä—É–≥–æ–≥–æ –∏–≥—Ä–æ–∫–∞
ROOM_STATUS_STARTED = "started"  # –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å
ROOM_STATUS_ENDED = "ended"  # –ò–≥—Ä–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å
def dice_handler(update: Update, context: CallbackContext):
    query = update.callback_query
    user_id = query.message.chat_id
    chat_id = query.message.chat_id
    message_id = query.message.message_id

    try:
        with connect_db() as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT id, player1_chat_id, player2_chat_id, player1_dice, player2_dice, status FROM rooms WHERE (player1_chat_id = ? OR player2_chat_id = ?) AND (status = ? OR status = ? OR status = ?)",
                           (user_id, user_id, ROOM_STATUS_BETTED, ROOM_STATUS_STARTED, ROOM_STATUS_OPEN))
            room = cursor.fetchone()

            if room:
                room_id, player1_chat_id, player2_chat_id, player1_dice, player2_dice, room_status = room
                if room_status == ROOM_STATUS_BETTED:
                    cursor.execute("UPDATE rooms SET status = 'open' WHERE id = ?", (room_id,))
                if room_status == ROOM_STATUS_STARTED:
                    print("Sending dice for player 1")
                    bot_dice = context.bot.send_dice(chat_id=player1_chat_id, emoji='üé≤').dice.value
                    print(f"Player 1 dice value: {bot_dice}")
                    cursor.execute("UPDATE rooms SET player1_dice = ? WHERE id = ?", (bot_dice, room_id))
                    print("Sending dice for player 2")
                    bot_dice = context.bot.send_dice(chat_id=player2_chat_id, emoji='üé≤').dice.value
                    print(f"Player 2 dice value: {bot_dice}")
                    cursor.execute("UPDATE rooms SET player2_dice = ? WHERE id = ?", (bot_dice, room_id))

                    conn.commit()

                    cursor.execute("SELECT player1_dice, player2_dice FROM rooms WHERE id = ?", (room_id,))
                    player1_dice, player2_dice = cursor.fetchone()

                    if player1_dice != 0 and player2_dice != 0:
                        if player1_dice > player2_dice:
                            cursor.execute("UPDATE rooms SET player1_balance = player1_balance + 5 WHERE id = ?", (room_id,))
                            cursor.execute("UPDATE rooms SET player2_balance = player2_balance - 5 WHERE id = ?", (room_id,))
                            winner_id = player1_chat_id
                        elif player1_dice < player2_dice:
                            cursor.execute("UPDATE rooms SET player1_balance = player1_balance - 5 WHERE id = ?", (room_id,))
                            cursor.execute("UPDATE rooms SET player2_balance = player2_balance + 5 WHERE id = ?", (room_id,))
                            winner_id = player2_chat_id
                        else:
                            winner_id = None

                        conn.commit()

                        context.bot.send_message(player1_chat_id, f"–í—ã –±—Ä–æ—Å–∏–ª–∏ {player1_dice}, –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫ –±—Ä–æ—Å–∏–ª {player2_dice}.")
                        context.bot.send_message(player2_chat_id, f"–í—ã –±—Ä–æ—Å–∏–ª–∏ {player2_dice}, –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫ –±—Ä–æ—Å–∏–ª {player1_dice}.")

                        if winner_id:
                            context.bot.send_message(winner_id, "–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ –∏–≥—Ä—É!")

                        cursor.execute("UPDATE rooms SET status = 'ended' WHERE id = ?", (room_id,))
                        conn.commit()

                    else:
                        context.bot.send_message(chat_id, "–û–∂–∏–¥–∞–Ω–∏–µ –±—Ä–æ—Å–∫–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞...")

                elif room_status == ROOM_STATUS_ENDED:
                    context.bot.send_message(chat_id, "–û–∂–∏–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã...")
            else:
                context.bot.send_message(chat_id, "–û–∂–∏–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã...")

    except Exception as e:
        logger.error(f"Error in dice_handler: {str(e)}")


def join_room1(update: Update, context: CallbackContext,bet_value):
    query = update.callback_query
    user_id = query.message.chat_id

    try:
        with connect_db() as conn:
            cursor = conn.cursor()

            # –ù–∞–π–¥–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç–∞–≤–∫–æ–π
            cursor.execute("SELECT id FROM rooms WHERE status = 'betted' AND Bet = ? AND player1_chat_id != ?", (bet_value, user_id))
            available_rooms = cursor.fetchall()

            if available_rooms:
                # –ü–æ–¥–∫–ª—é—á–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –ø–µ—Ä–≤–æ–π –¥–æ—Å—Ç—É–ø–Ω–æ–π –∫–æ–º–Ω–∞—Ç–µ
                room_id = available_rooms[0][0]
                cursor.execute("UPDATE rooms SET player2_chat_id = ?, status = 'started' WHERE id = ?", (user_id, room_id))
                conn.commit()

                # –û—Ç–ø—Ä–∞–≤–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
                query.edit_message_text(text=f"–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∫–æ–º–Ω–∞—Ç–µ —Å —Å—Ç–∞–≤–∫–æ–π {bet_value} PR. –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!")

                # –ó–∞–ø—É—Å—Ç–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –±—Ä–æ—Å–∫–∞ –∫–æ—Å—Ç–µ–π
                dice_handler(update, context)
            else:
                query.edit_message_text(text=f"–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç–∞–≤–∫–æ–π {bet_value} PR.")

    except Exception as e:
        logger.error(f"Error in join_room1: {str(e)}")


def join_room(update, context, page_number=1):
    with connect_db() as conn:
        query = update.callback_query
        user_id = query.message.chat_id
        all_buttons = []

        # Query rooms from the database based on the page number
        cursor = conn.cursor()
        cursor.execute("SELECT Bet, COUNT(*) FROM rooms WHERE status = 'betted' GROUP BY Bet")
        games_count = dict(cursor.fetchall())
        # –°–æ–∑–¥–∞–π—Ç–µ —Å—Ç—Ä–æ–∫—É —Å –Ω–æ–≤—ã–º —Ç–µ–∫—Å—Ç–æ–º, –∏—Å–ø–æ–ª—å–∑—É—è games_count
        new_text = "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–Ω–∞—Ç—É:\n"
        for bet, count in games_count.items():
            if (bet == 100):
                button = InlineKeyboardButton(f"üí∞{bet} PRüí∞", callback_data=f"p{bet}")
            elif (bet == 1000):
                button = InlineKeyboardButton(f"üí∞{bet} PRüí∞", callback_data=f"p{bet}")
            elif (bet == 5000):
                button = InlineKeyboardButton(f"üí∞{bet} PRüí∞", callback_data=f"p{bet}")
            elif (bet == 10000):
                button = InlineKeyboardButton(f"üí∞{bet} PRüí∞", callback_data=f"p{bet}")

            all_buttons.append([button])
            new_text += f"üí∞{bet} PRüí∞ - üé≤{count} gameüé≤\n"

        all_buttons.append([
            InlineKeyboardButton("üè†–ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é", callback_data="menu")
        ])
        # –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é —Ä–∞–∑–º–µ—Ç–∫—É
        new_markup = InlineKeyboardMarkup(all_buttons)

        # –ü–æ–ª—É—á–∏—Ç–µ —Ç–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç –∏ —Ä–∞–∑–º–µ—Ç–∫—É
        current_text = query.message.text
        current_markup = query.message.reply_markup

        # –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –ª–∏ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ä–∞–∑–º–µ—Ç–∫–∞ –æ—Ç —Ç–µ–∫—É—â–∏—Ö
        if new_text != current_text or new_markup != current_markup:
            query.edit_message_text(text=new_text, reply_markup=new_markup)






def main():
    updater = Updater(TOKEN)
    dp = updater.dispatcher

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
    dp.add_handler(CommandHandler("start", start))
    #dp.add_handler(CallbackQueryHandler(button_click))
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
    dp.add_handler(CallbackQueryHandler(button))
    dp.add_handler(MessageHandler(Filters.dice, dice_handler))
    dp.add_handler(CallbackQueryHandler(join_room))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    updater.start_polling()
    updater.idle()
    delete_all_rooms()  # –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã 'rooms'

if __name__ == '__main__':
    main()
